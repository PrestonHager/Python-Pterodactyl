{
  "_comment": "Pterodactyl Egg for Python Environment with uv Package Manager",
  "meta": {
    "version": "PTDL_v2",
    "update_url": null
  },
  "exported_at": "2025-10-24T20:00:00+00:00",
  "name": "Python UV Environment",
  "author": "prestonh",
  "description": "A Python environment using uv package manager with Git repository integration. Supports GitHub/GitLab repositories with authentication, automatic dependency installation, and flexible startup options.",
  "features": [
    "file_stem",
    "eula"
  ],
  "docker_images": {
    "python-uv": "python:3.11-slim"
  },
  "file_denylist": [],
  "startup": "{{STARTUP_COMMAND}}",
  "config": {
    "files": "{\r\n    \"start.sh\": {\r\n        \"parser\": \"bash\",\r\n        \"find\": \"#!/bin/bash\\n# Python UV Environment Startup Script\\n# Generated by Pterodactyl Panel\\n\\nset -e\\n\\n# Colors for output\\nRED='\\033[0;31m'\\nGREEN='\\033[0;32m'\\nYELLOW='\\033[1;33m'\\nBLUE='\\033[0;34m'\\nNC='\\033[0m' # No Color\\n\\n# Logging function\\nlog() {\\n    echo -e \"${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')]${NC} $1\"\\n}\\n\\nwarn() {\\n    echo -e \"${YELLOW}[$(date +'%Y-%m-%d %H:%M:%S')] WARNING:${NC} $1\"\\n}\\n\\nerror() {\\n    echo -e \"${RED}[$(date +'%Y-%m-%d %H:%M:%S')] ERROR:${NC} $1\"\\n    exit 1\\n}\\n\\n# Check if required environment variables are set\\nif [ -z \"$REPO_URL\" ]; then\\n    error \"REPO_URL environment variable is required\"\\nfi\\n\\nif [ -z \"$STARTUP_SCRIPT\" ]; then\\n    error \"STARTUP_SCRIPT environment variable is required\"\\nfi\\n\\n# Set default values\\nPULL_ON_START=${PULL_ON_START:-true}\\nUV_PYTHON_VERSION=${UV_PYTHON_VERSION:-3.11}\\nUV_VENV_NAME=${UV_VENV_NAME:-.venv}\\n\\nlog \"Starting Python UV Environment Setup\"\\nlog \"Repository: $REPO_URL\"\\nlog \"Startup Script: $STARTUP_SCRIPT\"\\nlog \"Pull on Start: $PULL_ON_START\"\\nlog \"Python Version: $UV_PYTHON_VERSION\"\\n\\n# Install system dependencies\\nlog \"Installing system dependencies...\"\\napt-get update -qq\\napt-get install -y -qq \\\\n    git \\\\n    curl \\\\n    build-essential \\\\n    libssl-dev \\\\n    libffi-dev \\\\n    python3-dev \\\\n    python3-pip \\\\n    && rm -rf /var/lib/apt/lists/*\\n\\n# Install uv\\nlog \"Installing uv package manager...\"\\ncurl -LsSf https://astral.sh/uv/install.sh | sh\\nexport PATH=\\\"/root/.cargo/bin:$PATH\\\"\\n\\n# Verify uv installation\\nif ! command -v uv &> /dev/null; then\\n    error \"Failed to install uv package manager\"\\nfi\\n\\nlog \"uv version: $(uv --version)\"\\n\\n# Setup Git credentials if provided\\nif [ -n \"$GIT_USERNAME\" ] && [ -n \"$GIT_TOKEN\" ]; then\\n    log \"Setting up Git credentials...\"\\n    git config --global user.name \\\"$GIT_USERNAME\\\"\\n    git config --global user.email \\\"$GIT_USERNAME@users.noreply.github.com\\\"\\n    \\n    # Configure Git to use token for authentication\\n    if [[ \\\"$REPO_URL\\\" == *\\\"github.com\\\"* ]]; then\\n        REPO_URL_WITH_AUTH=\\\"https://$GIT_USERNAME:$GIT_TOKEN@github.com/$(echo $REPO_URL | sed 's|https://github.com/||')\\\"\\n    elif [[ \\\"$REPO_URL\\\" == *\\\"gitlab.com\\\"* ]]; then\\n        REPO_URL_WITH_AUTH=\\\"https://$GIT_USERNAME:$GIT_TOKEN@gitlab.com/$(echo $REPO_URL | sed 's|https://gitlab.com/||')\\\"\\n    else\\n        warn \"Unknown Git provider, using original URL\"\\n        REPO_URL_WITH_AUTH=\\\"$REPO_URL\\\"\\n    fi\\nelse\\n    log \"No Git credentials provided, using public access\"\\n    REPO_URL_WITH_AUTH=\\\"$REPO_URL\\\"\\nfi\\n\\n# Clone or update repository\\nif [ ! -d \\\"./repo\\\" ]; then\\n    log \"Cloning repository...\"\\n    git clone \\\"$REPO_URL_WITH_AUTH\\\" ./repo\\nelse\\n    if [ \\\"$PULL_ON_START\\\" = \\\"true\\\" ]; then\\n        log \"Pulling latest changes...\"\\n        cd ./repo\\n        git pull\\n        cd ..\\n    else\\n        log \"Skipping pull (PULL_ON_START=false)\"\\n    fi\\nfi\\n\\n# Navigate to repository directory\\ncd ./repo\\n\\n# Create Python virtual environment with uv\\nlog \"Creating Python virtual environment with uv...\"\\nuv venv \\\"$UV_VENV_NAME\\\" --python \\\"$UV_PYTHON_VERSION\\\"\\n\\n# Activate virtual environment\\nsource \\\"$UV_VENV_NAME/bin/activate\\\"\\n\\n# Install dependencies if pyproject.toml exists\\nif [ -f \\\"pyproject.toml\\\" ]; then\\n    log \"Installing dependencies from pyproject.toml...\"\\n    uv pip install -e .\\nelif [ -f \\\"requirements.txt\\\" ]; then\\n    log \"Installing dependencies from requirements.txt...\"\\n    uv pip install -r requirements.txt\\nelif [ -f \\\"requirements-dev.txt\\\" ]; then\\n    log \"Installing development dependencies...\"\\n    uv pip install -r requirements-dev.txt\\nelse\\n    warn \"No dependency file found (pyproject.toml, requirements.txt, or requirements-dev.txt)\"\\nfi\\n\\n# Install additional packages if specified\\nif [ -n \\\"$ADDITIONAL_PACKAGES\\\" ]; then\\n    log \"Installing additional packages: $ADDITIONAL_PACKAGES\"\\n    uv pip install $ADDITIONAL_PACKAGES\\nfi\\n\\n# Run pre-startup script if it exists\\nif [ -f \\\"pre-start.sh\\\" ]; then\\n    log \"Running pre-startup script...\"\\n    chmod +x pre-start.sh\\n    ./pre-start.sh\\nfi\\n\\n# Run the main startup script\\nlog \"Starting application: $STARTUP_SCRIPT\"\\nlog \"Working directory: $(pwd)\"\\nlog \"Python version: $(python --version)\"\\nlog \"Virtual environment: $VIRTUAL_ENV\"\\n\\n# Execute the startup command\\nexec $STARTUP_SCRIPT\\n\"\r\n    },\r\n    \"pre-start.sh\": {\r\n        \"parser\": \"bash\",\r\n        \"find\": \"#!/bin/bash\\n# Pre-startup script - runs before the main application\\n# Add any custom setup commands here\\n\\necho \\\"Running pre-startup tasks...\\\"\\n\\n# Example: Create necessary directories\\n# mkdir -p logs data cache\\n\\n# Example: Set environment variables\\n# export CUSTOM_VAR=value\\n\\necho \\\"Pre-startup tasks completed\\\"\\n\"\r\n    },\r\n    \"pyproject.toml\": {\r\n        \"parser\": \"toml\",\r\n        \"find\": \"[build-system]\\nrequires = [\\\"hatchling\\\"]\\nbuild-backend = \\\"hatchling.build\\\"\\n\\n[project]\\nname = \\\"my-python-app\\\"\\nversion = \\\"0.1.0\\\"\\ndescription = \\\"My Python Application\\\"\\nrequires-python = \\\">=3.11\\\"\\ndependencies = [\\n    # Add your dependencies here\\n    # \\\"requests\\\",\\n    # \\\"fastapi\\\",\\n    # \\\"uvicorn\\\",\\n]\\n\\n[project.optional-dependencies]\\ndev = [\\n    # Development dependencies\\n    # \\\"pytest\\\",\\n    # \\\"black\\\",\\n    # \\\"flake8\\\",\\n]\\n\\n[project.scripts]\\nstart = \\\"myapp.main:main\\\"\\n\"\r\n    },\r\n    \"requirements.txt\": {\r\n        \"parser\": \"text\",\r\n        \"find\": \"# Python dependencies\\n# Add your package requirements here\\n\\n# Example packages:\\n# requests>=2.28.0\\n# fastapi>=0.100.0\\n# uvicorn[standard]>=0.20.0\\n# python-dotenv>=1.0.0\\n\"\r\n    },\r\n    \"requirements-dev.txt\": {\r\n        \"parser\": \"text\",\r\n        \"find\": \"# Development dependencies\\n# Add your development package requirements here\\n\\n# Example development packages:\\n# pytest>=7.0.0\\n# black>=23.0.0\\n# flake8>=6.0.0\\n# mypy>=1.0.0\\n\"\r\n    },\r\n    \"README.md\": {\r\n        \"parser\": \"markdown\",\r\n        \"find\": \"# Python UV Environment\\n\\nThis is a Python application running in a Pterodactyl-managed environment using the uv package manager.\\n\\n## Environment Variables\\n\\nThe following environment variables can be configured in the Pterodactyl panel:\\n\\n- `REPO_URL`: Git repository URL (required)\\n- `STARTUP_SCRIPT`: Command to run the application (required)\\n- `GIT_USERNAME`: Git username for authentication (optional)\\n- `GIT_TOKEN`: Git personal access token (optional)\\n- `PULL_ON_START`: Whether to pull latest changes on startup (default: true)\\n- `UV_PYTHON_VERSION`: Python version to use (default: 3.11)\\n- `UV_VENV_NAME`: Virtual environment name (default: .venv)\\n- `ADDITIONAL_PACKAGES`: Additional packages to install (optional)\\n\\n## Repository Structure\\n\\nYour repository should contain:\\n\\n- `pyproject.toml` or `requirements.txt` for dependencies\\n- `pre-start.sh` for pre-startup tasks (optional)\\n- Your application code\\n\\n## Example Startup Commands\\n\\n- `python main.py`\\n- `uvicorn app.main:app --host 0.0.0.0 --port 8000`\\n- `python -m myapp`\\n- `gunicorn app.wsgi:application --bind 0.0.0.0:8000`\\n\"\r\n    }\r\n}",
    "startup": "{{STARTUP_COMMAND}}",
    "logs": "{}",
    "stop": "^C"
  },
  "scripts": {
    "installation": {
      "script": "#!/bin/bash\n# Installation script for Python UV Environment\n# This script runs during the initial server setup\n\nset -e\n\n# Colors for output\nRED='\\033[0;31m'\nGREEN='\\033[0;32m'\nYELLOW='\\033[1;33m'\nBLUE='\\033[0;34m'\nNC='\\033[0m' # No Color\n\nlog() {\n    echo -e \"${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')]${NC} $1\"\n}\n\nlog \"Installing Python UV Environment...\"\n\n# Create necessary directories\nmkdir -p /home/container/repo\nmkdir -p /home/container/logs\nmkdir -p /home/container/data\nmkdir -p /home/container/cache\n\n# Set proper permissions\nchown -R container:container /home/container/\nchmod -R 755 /home/container/\n\nlog \"Python UV Environment installation completed!\"\nlog \"Please configure the following environment variables:\"\nlog \"  - REPO_URL: Your Git repository URL\"\nlog \"  - STARTUP_SCRIPT: Command to run your application\"\nlog \"  - GIT_USERNAME: Git username (optional)\"\nlog \"  - GIT_TOKEN: Git personal access token (optional)\"\nlog \"  - PULL_ON_START: Whether to pull on startup (default: true)\"\nlog \"  - UV_PYTHON_VERSION: Python version (default: 3.11)\"\nlog \"  - UV_VENV_NAME: Virtual environment name (default: .venv)\"\nlog \"  - ADDITIONAL_PACKAGES: Additional packages to install (optional)\"\n",
      "privileged": false
    }
  },
  "variables": [
    {
      "name": "REPO_URL",
      "description": "Git repository URL (GitHub/GitLab)",
      "default_value": "",
      "user_viewable": true,
      "user_editable": true,
      "rules": "required|string|max:255",
      "field_type": "text"
    },
    {
      "name": "STARTUP_SCRIPT",
      "description": "Command to run your Python application",
      "default_value": "python main.py",
      "user_viewable": true,
      "user_editable": true,
      "rules": "required|string|max:500",
      "field_type": "text"
    },
    {
      "name": "GIT_USERNAME",
      "description": "Git username for repository authentication (optional)",
      "default_value": "",
      "user_viewable": true,
      "user_editable": true,
      "rules": "nullable|string|max:100",
      "field_type": "text"
    },
    {
      "name": "GIT_TOKEN",
      "description": "Git personal access token for authentication (optional)",
      "default_value": "",
      "user_viewable": true,
      "user_editable": true,
      "rules": "nullable|string|max:255",
      "field_type": "text"
    },
    {
      "name": "PULL_ON_START",
      "description": "Pull latest changes from repository on startup",
      "default_value": "true",
      "user_viewable": true,
      "user_editable": true,
      "rules": "required|boolean",
      "field_type": "text"
    },
    {
      "name": "UV_PYTHON_VERSION",
      "description": "Python version to use with uv",
      "default_value": "3.11",
      "user_viewable": true,
      "user_editable": true,
      "rules": "required|string|in:3.8,3.9,3.10,3.11,3.12,3.13",
      "field_type": "text"
    },
    {
      "name": "UV_VENV_NAME",
      "description": "Virtual environment directory name",
      "default_value": ".venv",
      "user_viewable": true,
      "user_editable": true,
      "rules": "required|string|max:50",
      "field_type": "text"
    },
    {
      "name": "ADDITIONAL_PACKAGES",
      "description": "Additional Python packages to install (space-separated)",
      "default_value": "",
      "user_viewable": true,
      "user_editable": true,
      "rules": "nullable|string|max:500",
      "field_type": "text"
    },
    {
      "name": "STARTUP_COMMAND",
      "description": "Internal startup command (do not modify)",
      "default_value": "./start.sh",
      "user_viewable": false,
      "user_editable": false,
      "rules": "required|string",
      "field_type": "text"
    }
  ]
}
